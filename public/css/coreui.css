/*! Tetra UI v1.0.1 | (MIT Licence) (c) Viadeo/APVO Corp - inspired by Bootstrap (c) Twitter, Inc. (Apache 2 Licence) */
/* Variables.less
 * Variables to customize the look and feel of Bootstrap
 * ----------------------------------------------------- */
/* Mixins.less
 * Snippets of reusable CSS to develop faster and keep code readable
 * ----------------------------------------------------------------- */
/* Yeah ! Duplicate code ! Thanks to LESS and his lack of conditions */
/* Reset.less
 * An adapted version of the adapted version of eric mayers reset for Twitter's Bootstrap
 * ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
html,
body {
  background: #FFFFFF;
}
body,
h1,
h2,
h3,
h4,
h5,
h6,
p,
div,
span,
blockquote,
pre,
a,
button,
abbr,
acronym,
address,
cite,
code,
del,
dfn,
em,
img,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
dd,
dl,
dt,
li,
ol,
ul,
fieldset,
form,
label,
legend,
button,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td {
  margin: 0;
  padding: 0;
  border: 0;
  background: transparent;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
  text-align: left;
  width: 100%;
}
address,
caption,
cite,
code,
dfn,
strong,
th,
var,
optgroup {
  font-style: inherit;
}
del,
ins {
  text-decoration: none;
}
caption,
th {
  text-align: left;
}
abbr,
acronym {
  font-variant: normal;
  cursor: help;
  border-bottom: 1px dotted #808080;
}
abbr:hover,
acronym:hover {
  cursor: help;
}
sup,
sub {
  vertical-align: baseline;
}
ol,
ul {
  list-style: none;
}
q:before,
q:after,
blockquote:before,
blockquote:after {
  content: "";
}
p {
  font-size: inherit;
  line-height: 125%;
  margin-bottom: 1em;
}
html {
  overflow-y: scroll;
  font-size: 100%;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
}
a:focus {
  outline: thin dotted;
}
a:hover,
a:active {
  outline: 0;
}
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
nav,
section {
  display: block;
}
audio,
canvas,
video {
  display: inline-block;
  *display: inline;
  *zoom: 1;
}
audio:not([controls]) {
  display: none;
}
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}
sup {
  top: -0.5em;
}
sub {
  bottom: -0.25em;
}
img {
  border: 0;
  -ms-interpolation-mode: bicubic;
}
button,
input,
select,
textarea {
  font-size: 100%;
  margin: 0;
  vertical-align: baseline;
  *vertical-align: middle;
  font-family: inherit;
}
button,
input {
  line-height: normal;
  *overflow: visible;
}
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}
button,
input[type="button"],
input[type="reset"],
input[type="submit"] {
  cursor: pointer;
  -webkit-appearance: button;
}
input[type="search"] {
  -webkit-appearance: textfield;
  -webkit-box-sizing: content-box;
  -moz-box-sizing: content-box;
  box-sizing: content-box;
}
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}
textarea {
  overflow: auto;
  vertical-align: top;
}
/* Grid Specific Mixins
 * ----------------------------------------------------------------- */
#grid {
  /**
  * Determine width and margin for grid unit with spacing
  *
  * @param (integer)span           the column span of the grid unit                                          required
  * @param (integer)total          the total number of columns in the grid row                               required
  * @param (pixels)spacing         the ammount of spacing required between grid units                        required
  * @param (integer)parentSpan     the column span of the parent grid unit, used for nested grids            optional
  * @param (integer)parentTotal    the total number of columns in the parent grid unit's grid row            optional
  * @param (pixels)parentSpacing   the ammount of spacing between grid units in the parent unit's grid row   optional
  *
  * The width of the grid unit is a percentage value, and the margin is in pixels.
  * We therefore need to first calculate the margin as a percentage of the parent
  * grid row and compensate in the width percentage value of each grid unit.
  */

}
.fixed-container {
  width: 980px;
  margin: 0 auto;
  zoom: 1;
}
.fixed-container:before,
.fixed-container:after {
  display: table;
  content: "";
  zoom: 1;
  *display: inline;
}
.fixed-container:after {
  clear: both;
}
/* Grid System
 * ----------------------------------------------------------------- */
/*
*   This grid system is retro-compatiable with the old one, but the
*   old one must not be used in new projects.
*/
.gr,
.line {
  width: 100%;
  zoom: 1;
}
.gr:before,
.line:before,
.gr:after,
.line:after {
  display: table;
  content: "";
  zoom: 1;
  *display: inline;
}
.gr:after,
.line:after {
  clear: both;
}
/**
* NOTE: When ready to remove IE6/7 support, all selectors beginning with .grs
* can be removed, and add direct decendant indicators (>) to the grid units
* contained within the spaced grid row containers declared after these rules
*/
.gu,
.gridUnit {
  float: left;
}
.gu-1of1,
.grid1of1 {
  width: 100%;
  margin: 0;
}
.gu-1of2,
.grid1of2,
.gu-2of4,
.grid2of4 {
  width: 50%;
  margin: 0;
}
.gu-1of3,
.grid1of3 {
  width: 33.333333333333336%;
  margin: 0;
}
.gu-2of3,
.grid2of3 {
  width: 66.66666666666667%;
  margin: 0;
}
.gu-1of4,
.grid1of4 {
  width: 25%;
  margin: 0;
}
.gu-3of4,
.grid3of4 {
  width: 75%;
  margin: 0;
}
.gu-1of5,
.grid1of5 {
  width: 20%;
  margin: 0;
}
.gu-2of5,
.grid2of5 {
  width: 40%;
  margin: 0;
}
.gu-3of5,
.grid3of5 {
  width: 60%;
  margin: 0;
}
.gu-4of5,
.grid4of5 {
  width: 80%;
  margin: 0;
}
.gu-last,
.gridLastUnit {
  zoom: 1;
  display: table-cell;
  *display: block;
  float: none;
  width: 2000px;
  *width: auto;
  _position: relative;
  _left: -3px;
  _margin-right: -3px;
}
.grsxs > .gu-1of2,
.grsxs > .gu-2of4,
.grsxs > .grid1of2,
.grsxs > .grid2of4 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 49.744897959183675%;
  margin-right: 5px;
}
.grsxs > .gu-1of3,
.grsxs > .grid1of3 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 32.993197278911566%;
  margin-right: 5px;
}
.grsxs > .gu-2of3,
.grsxs > .grid2of2 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 66.49659863945578%;
  margin-right: 5px;
}
.grsxs > .gu-1of4,
.grsxs > .grid1of4 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 24.617346938775512%;
  margin-right: 5px;
}
.grsxs > .gu-3of4,
.grsxs > .grid3of4 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 74.87244897959184%;
  margin-right: 5px;
}
.grsxs > .gu-1of5,
.grsxs > .grid1of5 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 19.591836734693878%;
  margin-right: 5px;
}
.grsxs > .gu-2of5,
.grsxs > .grid2of5 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 39.795918367346935%;
  margin-right: 5px;
}
.grsxs > .gu-3of5,
.grsxs > .grid3of5 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 59.863945578231295%;
  margin-right: 5px;
}
.grsxs > .gu-4of5,
.grsxs > .grid4of5 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 79.89795918367346%;
  margin-right: 5px;
}
.grss > .gu-1of2,
.grss > .gu-2of4,
.grss > .grid1of2,
.grss > .grid2of4 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 49.48979591836735%;
  margin-right: 10px;
}
.grss > .gu-1of3,
.grss > .grid1of3 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 32.6530612244898%;
  margin-right: 10px;
}
.grss > .gu-2of3,
.grss > .grid2of3 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 66.32653061224491%;
  margin-right: 10px;
}
.grss > .gu-1of4,
.grss > .grid1of4 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 24.23469387755102%;
  margin-right: 10px;
}
.grss > .gu-3of4,
.grss > .grid3of4 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 74.74489795918367%;
  margin-right: 10px;
}
.grss > .gu-1of5,
.grss > .grid1of5 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 19.183673469387756%;
  margin-right: 10px;
}
.grss > .gu-2of5,
.grss > .grid2of5 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 39.59183673469388%;
  margin-right: 10px;
}
.grss > .gu-3of5,
.grss > .grid3of5 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 59.72789115646258%;
  margin-right: 10px;
}
.grss > .gu-4of5,
.grss > .grid4of5 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 79.79591836734694%;
  margin-right: 10px;
}
.grsm > .gu-1of2,
.grsm > .gu-2of4,
.grsm > .grid1of2,
.grsm > .grid2of4 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 49.234693877551024%;
  margin-right: 15px;
}
.grsm > .gu-1of3,
.grsm > .grid1of3 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 32.31292517006803%;
  margin-right: 15px;
}
.grsm > .gu-2of3,
.grsm > .grid2of3 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 66.15646258503402%;
  margin-right: 15px;
}
.grsm > .gu-1of4,
.grsm > .grid1of4 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 23.852040816326532%;
  margin-right: 15px;
}
.grsm > .gu-3of4,
.grsm > .grid3of4 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 74.61734693877551%;
  margin-right: 15px;
}
.grsm > .gu-1of5,
.grsm > .grid1of5 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 18.775510204081634%;
  margin-right: 15px;
}
.grsm > .gu-2of5,
.grsm > .grid2of5 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 39.38775510204081%;
  margin-right: 15px;
}
.grsm > .gu-3of5,
.grsm > .grid3of5 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 59.59183673469388%;
  margin-right: 15px;
}
.grsm > .gu-4of5,
.grsm > .grid4of5 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 79.6938775510204%;
  margin-right: 15px;
}
.grsl > .gu-1of2,
.grsl > .gu-2of4,
.grsl > .grid1of2,
.grsl > .grid2of4 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 48.97959183673469%;
  margin-right: 20px;
}
.grsl > .gu-1of3,
.grsl > .grid1of3 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 31.97278911564626%;
  margin-right: 20px;
}
.grsl > .gu-2of3,
.grsl > .grid2of3 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 65.98639455782313%;
  margin-right: 20px;
}
.grsl > .gu-1of4,
.grsl > .grid1of4 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 23.46938775510204%;
  margin-right: 20px;
}
.grsl > .gu-3of4,
.grsl > .grid3of4 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 74.48979591836735%;
  margin-right: 20px;
}
.grsl > .gu-1of5,
.grsl > .grid1of5 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 18.367346938775512%;
  margin-right: 20px;
}
.grsl > .gu-2of5,
.grsl > .grid2of5 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 39.183673469387756%;
  margin-right: 20px;
}
.grsl > .gu-3of5,
.grsl > .grid3of5 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 59.45578231292517%;
  margin-right: 20px;
}
.grsl > .gu-4of5,
.grsl > .grid4of5 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 79.59183673469387%;
  margin-right: 20px;
}
.grsxl > .gu-1of2,
.grsxl > .gu-2of4,
.grsxl > .grid1of2,
.grsxl > .grid2of4 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 48.46938775510204%;
  margin-right: 30px;
}
.grsxl > .gu-1of3 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 31.292517006802726%;
  margin-right: 30px;
}
.grsxl > .gu-2of3 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 65.64625850340137%;
  margin-right: 30px;
}
.grsxl > .gu-1of4 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 22.70408163265306%;
  margin-right: 30px;
}
.grsxl > .gu-3of4 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 74.23469387755102%;
  margin-right: 30px;
}
.grsxl > .gu-1of5 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 17.551020408163264%;
  margin-right: 30px;
}
.grsxl > .gu-2of5 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 38.775510204081634%;
  margin-right: 30px;
}
.grsxl > .gu-3of5 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 59.183673469387756%;
  margin-right: 30px;
}
.grsxl > .gu-4of5 {
  /* Calculate the width of the parent element, in pixels
     ====================================================== */

  /**
     * Get the parent width percentage.
     * Uses exactly the same logic as the section below ("Calculate the width
     * of the grid unit, in percentage"), just concatinated.
     */

  /**
     * Calculate the parent element width in pixels
     */

  /* Calculate the width of the grid unit, in percentage
       ====================================================== */

  /**
     * Calculate the spacing width as a percentage of the parent width.
     * There is no LESS function to change a variable from pixels to percentage,
     * so we just multiply 1% by the percentage value in pixels (math hack)
     */

  /**
     * Calculate the base width (as if there were no spacing)
     */

  /**
     * As we are using margin-right, the number of units with spacing should be
     * one less than the total number of units
     */

  /**
     * Calculate the proporsion of the grid row consumed by spacing (percentage)
     */

  /**
     * To calculate how much width to subtract from each one of the units with
     * spacing, we take the total ammount of spacing in the grid row, divide it
     * by the total number of columns, then divide that by the the number of columns
     * that the unit in question consumes :)
     */

  /* Set the CSS properties */

  width: 79.38775510204081%;
  margin-right: 30px;
}
.gr-zebra .gu,
.gr-zebra .gridUnit {
  text-align: center;
  padding: 10px 0;
  *background-color: #e6e6e6;
}
.gr-zebra .gu:nth-child(even),
.gr-zebra .gridUnit:nth-child(even) {
  background-color: #e6e6e6;
}
.gr-zebra .gu:nth-child(odd),
.gr-zebra .gridUnit:nth-child(odd) {
  background-color: #f2f2f2;
}
/* Helpers
 * Short CSS classes to save time and maintain consistency
 * ----------------------------------------------------------------- */
/* Spacing
 * ----------------------------------------------------------------- */
/* Margin */
.pan {
  padding: 0!important;
}
.ptn,
.pvn {
  padding-top: 0!important;
}
.prn,
.phn {
  padding-right: 0!important;
}
.pbn,
.pvn {
  padding-bottom: 0!important;
}
.pln,
.phn {
  padding-left: 0!important;
}
.paxs {
  padding: 5px !important;
}
.ptxs,
.pvxs {
  padding-top: 5px !important;
}
.prxs,
.phxs {
  padding-right: 5px !important;
}
.pbxs,
.pvxs {
  padding-bottom: 5px !important;
}
.plxs,
.phxs {
  padding-left: 5px !important;
}
.pas {
  padding: 10px !important;
}
.pts,
.pvs {
  padding-top: 10px !important;
}
.prs,
.phs {
  padding-right: 10px !important;
}
.pbs,
.pvs {
  padding-bottom: 10px !important;
}
.pls,
.phs {
  padding-left: 10px !important;
}
.pam {
  padding: 15px !important;
}
.ptm,
.pvm {
  padding-top: 15px !important;
}
.prm,
.phm {
  padding-right: 15px !important;
}
.pbm,
.pvm {
  padding-bottom: 15px !important;
}
.plm,
.phm {
  padding-left: 15px !important;
}
.pal {
  padding: 20px !important;
}
.ptl,
.pvl {
  padding-top: 20px !important;
}
.prl,
.phl {
  padding-right: 20px !important;
}
.pbl,
.pvl {
  padding-bottom: 20px !important;
}
.pll,
.phl {
  padding-left: 20px !important;
}
.paxl {
  padding: 30px !important;
}
.ptxl,
.pvxl {
  padding-top: 30px !important;
}
.prxl,
.phxl {
  padding-right: 30px !important;
}
.pbxl,
.pvxl {
  padding-bottom: 30px !important;
}
.plxl,
.phxl {
  padding-left: 30px !important;
}
/* Padding */
.man {
  margin: 0!important;
}
.mtn,
.mvn {
  margin-top: 0!important;
}
.mrn,
.mhn {
  margin-right: 0!important;
}
.mbn,
.mvn {
  margin-bottom: 0!important;
}
.mln,
.mhn {
  margin-left: 0!important;
}
.maxs {
  margin: 5px !important;
}
.mtxs,
.mvxs {
  margin-top: 5px !important;
}
.mrxs,
.mhxs {
  margin-right: 5px !important;
}
.mbxs,
.mvxs {
  margin-bottom: 5px !important;
}
.mlxs,
.mhxs {
  margin-left: 5px !important;
}
.mas {
  margin: 10px !important;
}
.mts,
.mvs {
  margin-top: 10px !important;
}
.mrs,
.mhs {
  margin-right: 10px !important;
}
.mbs,
.mvs {
  margin-bottom: 10px !important;
}
.mls,
.mhs {
  margin-left: 10px !important;
}
.mam {
  margin: 15px !important;
}
.mtm,
.mvm {
  margin-top: 15px !important;
}
.mrm,
.mhm {
  margin-right: 15px !important;
}
.mbm,
.mvm {
  margin-bottom: 15px !important;
}
.mlm,
.mhm {
  margin-left: 15px !important;
}
.mal {
  margin: 20px !important;
}
.mtl,
.mvl {
  margin-top: 20px !important;
}
.mrl,
.mhl {
  margin-right: 20px !important;
}
.mbl,
.mvl {
  margin-bottom: 20px !important;
}
.mll,
.mhl {
  margin-left: 20px !important;
}
.maxl {
  margin: 30px !important;
}
.mtxl,
.mvxl {
  margin-top: 30px !important;
}
.mrxl,
.mhxl {
  margin-right: 30px !important;
}
.mbxl,
.mvxl {
  margin-bottom: 30px !important;
}
.mlxl,
.mhxl {
  margin-left: 30px !important;
}
/* Border Radius
 * ----------------------------------------------------------------- */
.bran {
  border-radius: 0;
}
.brtln,
.brtn,
.brln {
  border-top-left-radius: 0;
}
.brtrn,
.brtn,
.brrn {
  border-top-right-radius: 0;
}
.brbrn,
.brbn,
.brrn {
  border-bottom-right-radius: 0;
}
.brbln,
.brbn,
.brln {
  border-bottom-left-radius: 0;
}
.bras {
  border-radius: 3px;
}
.brtls,
.brts,
.brls {
  border-top-left-radius: 3px;
}
.brtrs,
.brts,
.brrs {
  border-top-right-radius: 3px;
}
.brbrs,
.brbs,
.brrs {
  border-bottom-right-radius: 3px;
}
.brbls,
.brbs,
.brls {
  border-bottom-left-radius: 3px;
}
.bram {
  border-radius: 5px;
}
.brtlm,
.brtm,
.brlm {
  border-top-left-radius: 5px;
}
.brtrm,
.brtm,
.brrm {
  border-top-right-radius: 5px;
}
.brbrm,
.brbm,
.brrm {
  border-bottom-right-radius: 5px;
}
.brblm,
.brbm,
.brlm {
  border-bottom-left-radius: 5px;
}
.bral {
  border-radius: 10px;
}
.brtll,
.brtl,
.brll {
  border-top-left-radius: 10px;
}
.brtrl,
.brtl,
.brrl {
  border-top-right-radius: 10px;
}
.brbrl,
.brbl,
.brrl {
  border-bottom-right-radius: 10px;
}
.brbll,
.brbl,
.brll {
  border-bottom-left-radius: 10px;
}
/* Text Alignment
 * ----------------------------------------------------------------- */
.tac,
.center {
  text-align: center;
}
.tal {
  text-align: left;
}
.tar {
  text-align: right;
}
.taj {
  text-align: justify;
}
.tai {
  text-align: inherit;
}
.hyph {
  -webkit-hyphens: auto;
  -moz-hyphens: auto;
  -ms-hyphens: auto;
  -o-hyphens: auto;
  hyphens: auto;
}
/* Gray scale
 * ----------------------------------------------------------------- */
.black {
  color: #000000;
}
.dark-gray {
  color: #404040;
}
.gray {
  color: #808080;
}
.light-gray {
  color: #bfbfbf;
}
.lighter-gray {
  color: #e6e6e6;
}
.white {
  color: #ffffff;
}
/* Miscellaneous
 * ----------------------------------------------------------------- */
.context {
  overflow: hidden;
  zoom: 1;
  _overflow: visible;
}
.cf,
.clearfix {
  zoom: 1;
}
.cf:before,
.clearfix:before,
.cf:after,
.clearfix:after {
  display: table;
  content: "";
  zoom: 1;
  *display: inline;
}
.cf:after,
.clearfix:after {
  clear: both;
}
.clear {
  clear: both;
}
.hidden {
  display: none;
}
.elsewhere {
  position: absolute;
  left: -99999px;
}
.fl,
.floatL {
  float: left;
}
.fr,
.floatR {
  float: right;
}
.outline {
  outline: #bfbfbf dashed thin;
}
.outline-red {
  outline: #FF0000 dashed thin;
}
.error {
  color: #da4d4d;
}
.nowrap {
  white-space: nowrap;
}
/* Typography.less
 * Headings, body text, lists, code, and more for a versatile and durable typography system
 * ---------------------------------------------------------------------------------------- */
@font-face {
  font-family: 'MuseoSlab';
  src: url('/css/core/fonts/museoslab/museoslab-500.eot');
  src: url('/css/core/fonts/museoslab/museoslab-500.eot?#iefix') format('embedded-opentype'), url('/css/core/fonts/museoslab/museoslab-500.woff') format('woff'), url('/css/core/fonts/museoslab/museoslab-500.ttf') format('truetype');
  font-weight: normal;
  font-style: normal;
}
body {
  font-family: Arial, sans-serif;
  font-size: 12px;
  font-weight: normal;
  line-height: 1.4em;
}
p {
  margin-bottom: 1.4em;
}
a {
  color: #0a87cd;
  text-decoration: none;
  text-align: left;
  cursor: pointer;
}
a:hover {
  text-decoration: underline;
  color: #0a87cd;
}
h1,
.h1,
h2,
.h2,
h3,
.h3,
h4,
.h4,
h5,
.h5,
h6,
.h6 {
  font-family: Arial, sans-serif;
  font-weight: bold;
  margin-bottom: 0.5599999999999999em;
  color: #3c3c3c;
}
h1,
.h1 {
  font-size: 20px;
}
h2,
.h2 {
  font-size: 18px;
}
h3,
.h3 {
  font-size: 16px;
}
h4,
.h4 {
  font-size: 15px;
}
h5,
.h5 {
  font-size: 14px;
  padding-bottom: 0.4666666666666666em;
}
h6,
.h6 {
  font-size: 13px;
  padding-bottom: 0.4666666666666666em;
  text-transform: uppercase;
  color: #888888;
}
.h-alt,
.subh-alt {
  border-top: 3px solid #d0dce2;
  font-size: 14px;
  margin: 0;
  padding: 5px 0;
}
.h-alt {
  text-transform: uppercase;
}
.subh-divider {
  padding-bottom: 5px;
  border-bottom: 1px solid #e5e9ec;
  font-size: 14px;
}
.h-bx {
  border-bottom: 3px solid #83a0b9;
  font-size: 16px;
  padding: 0 0 7px 0;
  font: normal 16px "MuseoSlab", "Arial", sans-serif;
}
.h-bx .h-bx-link {
  float: right;
}
.h-bx .h-bx-link .vicon {
  color: #c1d0dc;
  font-size: 8px;
  margin: 0 -1px 0 0;
}
.h-bx .h-bx-link:hover .vicon {
  color: #83a0b9;
}
ul.link-list {
  list-style: none;
  margin: 0;
  padding: 0;
}
ul.link-list li {
  position: relative;
  margin: 0 0 5px 0;
  padding: 0 0 0 7px;
}
ul.link-list li:before {
  content: '';
  position: absolute;
  left: 0;
  top: 0.5em;
  width: 3px;
  height: 3px;
  background: #0a87cd;
}
ul.list-square li {
  list-style: square;
  margin-left: 15px;
}
ul.list-disc li {
  list-style: disc;
  margin-left: 15px;
}
.panel {
  border-top: 1px solid #E6EAED;
  background: #F7F9FA;
  padding: 10px;
}
.divider-before {
  padding-top: 10px;
  border-top: 1px dotted #d0dce2;
}
.divider-after {
  padding-bottom: 10px;
  border-bottom: 1px dotted #d0dce2;
}
strong {
  font-style: inherit;
  font-weight: bold;
}
em {
  font-style: italic;
  font-weight: inherit;
  line-height: inherit;
}
.muted {
  color: #808080;
}
code,
pre {
  padding: 0 3px 2px;
  font-family: Monaco, Andale Mono, Courier New, monospace;
  font-size: 12px;
  font-weight: normal;
  line-height: 1.4em;
}
code {
  padding: 1px 3px;
  display: inline-block;
  border-radius: 3px;
}
pre {
  overflow-x: scroll;
  overflow: auto;
}
/* Forms.less
/* Base styles for various input types, form layouts, and states
/* ------------------------------------------------------------- */
.input-block-level {
  display: block;
  width: 100%;
  min-height: 28px;
  /* Make inputs at least the height of their button counterpart */

  /* Makes inputs behave like true block-level elements */

  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  -ms-box-sizing: border-box;
  box-sizing: border-box;
}
/* GENERAL STYLES
/* -------------- */
.core-form {
  margin: 0 0 1.4em;
}
.core-form fieldset {
  padding: 0;
  margin: 0;
  border: 0;
}
.core-form legend {
  display: block;
  width: 100%;
  padding: 0;
  margin-bottom: 2.0999999999999996em;
  font-size: 18px;
  line-height: 2.8em;
  color: #404040;
  border: 0;
  border-bottom: 1px solid #eee;
}
.core-form legend small {
  font-size: 1.0499999999999998em;
  color: #bfbfbf;
}
.core-form label,
.core-form input,
.core-form button,
.core-form select,
.core-form textarea {
  font-size: 12px;
  font-weight: normal;
  line-height: 1.4em;
}
.core-form input,
.core-form button,
.core-form select,
.core-form textarea {
  font-family: Arial, sans-serif;
}
.core-form label {
  display: block;
  margin-bottom: 5px;
  color: #404040;
}
.core-form input,
.core-form textarea,
.core-form select,
.core-form .uneditable-input {
  display: inline-block;
  width: 210px;
  height: 1.4em;
  padding: 4px;
  margin-bottom: 9px;
  font-size: 12px;
  line-height: 1.4em;
  color: #404040;
  vertical-align: middle;
  border: 1px solid #cbd2d6;
  border-radius: 3px;
}
.core-form .uneditable-textarea {
  width: auto;
  height: auto;
}
.core-form label input,
.core-form label textarea,
.core-form label select {
  display: block;
}
.core-form input[type="image"],
.core-form input[type="checkbox"],
.core-form input[type="radio"] {
  width: auto;
  height: auto;
  padding: 0;
  margin: 3px 0;
  *margin-top: 0;
  /* IE7 */

  line-height: normal;
  cursor: pointer;
  border-radius: 0;
  border: 0 \9;
  /* IE9 and down */

}
.core-form input[type="image"] {
  border: 0;
}
.core-form input[type="file"] {
  width: auto;
  padding: initial;
  line-height: initial;
  border: initial;
  background-color: #ffffff;
  background-color: initial;
  -webkit-box-shadow: none;
  box-shadow: none;
}
.core-form input[type="button"],
.core-form input[type="reset"],
.core-form input[type="submit"] {
  width: auto;
  height: auto;
}
.core-form select,
.core-form input[type="file"] {
  height: 28px;
  /* In IE7, the height of the select element cannot be changed by height, only font-size */

  *margin-top: 4px;
  /* For IE7, add top margin to align select with labels */

  line-height: 28px;
}
.core-form input[type="file"] {
  line-height: 18px \9;
}
.core-form select {
  width: 220px;
  background-color: #ffffff;
}
.core-form select[multiple],
.core-form select[size] {
  height: auto;
}
.core-form input[type="image"] {
  -webkit-box-shadow: none;
  box-shadow: none;
}
.core-form textarea {
  height: auto;
}
.core-form input[type="hidden"] {
  display: none;
}
.core-form .radio,
.core-form .checkbox {
  padding-left: 18px;
}
.core-form .radio input[type="radio"],
.core-form .checkbox input[type="checkbox"] {
  float: left;
  margin-left: -18px;
  *clear: left;
}
.core-form .controls > .radio:first-child,
.core-form .controls > .checkbox:first-child {
  padding-top: 5px;
}
.core-form .radio.inline,
.core-form .checkbox.inline {
  display: inline-block;
  padding-top: 5px;
  margin-bottom: 0;
  vertical-align: middle;
}
.core-form .radio.inline + .radio.inline,
.core-form .checkbox.inline + .checkbox.inline {
  margin-left: 10px;
}
.core-form input,
.core-form textarea {
  -webkit-box-shadow: inset 0 0 3px rgba(0, 0, 0, 0.1);
  box-shadow: inset 0 0 3px rgba(0, 0, 0, 0.1);
  -webkit-transition: border linear 0.2s, box-shadow linear 0.2s;
  -moz-transition: border linear 0.2s, box-shadow linear 0.2s;
  -o-transition: border linear 0.2s, box-shadow linear 0.2s;
  transition: border linear 0.2s, box-shadow linear 0.2s;
}
.core-form input:focus,
.core-form textarea:focus {
  border-color: #88a7bc;
  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 3px #88a7bc;
  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 3px #88a7bc;
  outline: 0;
  outline: thin dotted \9;
  /* IE6-9 */

}
.core-form input[type="file"]:focus,
.core-form input[type="radio"]:focus,
.core-form input[type="checkbox"]:focus,
.core-form select:focus {
  -webkit-box-shadow: none;
  box-shadow: none;
  outline: thin dotted #333;
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}
.core-form .input-mini {
  width: 60px;
}
.core-form .input-small {
  width: 90px;
}
.core-form .input-medium {
  width: 150px;
}
.core-form .input-large {
  width: 210px;
}
.core-form .input-xlarge {
  width: 270px;
}
.core-form .input-xxlarge {
  width: 530px;
}
.core-form .input-fullwidth {
  box-sizing: border-box;
  width: 100%;
  -moz-box-sizing: border-box;
  *behavior: url(/javascript/coremvc/apps/companyprofile/lib/boxsizing.htc);
}
.core-form input[class*="span"],
.core-form select[class*="span"],
.core-form textarea[class*="span"],
.core-form .uneditable-input {
  float: none;
  margin-left: 0;
}
.core-form input[disabled],
.core-form select[disabled],
.core-form textarea[disabled],
.core-form input[readonly],
.core-form select[readonly],
.core-form textarea[readonly] {
  background-color: #e6e6e6;
  border-color: #ddd;
  cursor: not-allowed;
}
.core-form .control-group.warning > label,
.core-form .control-group.warning .help-block,
.core-form .control-group.warning .help-inline {
  color: #c09853;
}
.core-form .control-group.warning input,
.core-form .control-group.warning select,
.core-form .control-group.warning textarea {
  border-color: #c09853;
}
.core-form .control-group.warning input:focus,
.core-form .control-group.warning select:focus,
.core-form .control-group.warning textarea:focus {
  border-color: #a47e3c;
  -webkit-box-shadow: 0 0 6px rgba(192, 152, 83, 0.6);
  box-shadow: 0 0 6px rgba(192, 152, 83, 0.6);
}
.core-form .control-group.warning .input-prepend .add-on,
.core-form .control-group.warning .input-append .add-on {
  color: #c09853;
  background-color: #fcf8e3;
  border-color: #c09853;
}
.core-form .control-group.error > label,
.core-form .control-group.error .help-block,
.core-form .control-group.error .help-inline {
  color: #c80000;
}
.core-form .control-group.error input,
.core-form .control-group.error select,
.core-form .control-group.error textarea {
  border-color: #c80000;
}
.core-form .control-group.error input:focus,
.core-form .control-group.error select:focus,
.core-form .control-group.error textarea:focus {
  border-color: #950000;
  -webkit-box-shadow: 0 0 6px rgba(200, 0, 0, 0.6);
  box-shadow: 0 0 6px rgba(200, 0, 0, 0.6);
}
.core-form .control-group.error .input-prepend .add-on,
.core-form .control-group.error .input-append .add-on {
  color: #c80000;
  background-color: #fff1f1;
  border-color: #c80000;
}
.core-form .control-group.success > label,
.core-form .control-group.success .help-block,
.core-form .control-group.success .help-inline {
  color: #65a900;
}
.core-form .control-group.success input,
.core-form .control-group.success select,
.core-form .control-group.success textarea {
  border-color: #65a900;
}
.core-form .control-group.success input:focus,
.core-form .control-group.success select:focus,
.core-form .control-group.success textarea:focus {
  border-color: #477600;
  -webkit-box-shadow: 0 0 6px rgba(101, 169, 0, 0.6);
  box-shadow: 0 0 6px rgba(101, 169, 0, 0.6);
}
.core-form .control-group.success .input-prepend .add-on,
.core-form .control-group.success .input-append .add-on {
  color: #65a900;
  background-color: #dff0d8;
  border-color: #65a900;
}
.core-form .control-group.disabled label {
  color: #999999;
  cursor: not-allowed;
}
.core-form .control-group.disabled .help-block,
.core-form .control-group.disabled .help-inline {
  color: #bfbfbf;
}
.core-form input:focus:required:invalid,
.core-form textarea:focus:required:invalid,
.core-form select:focus:required:invalid {
  color: #b94a48;
  border-color: #ee5f5b;
}
.core-form input:focus:required:invalid:focus,
.core-form textarea:focus:required:invalid:focus,
.core-form select:focus:required:invalid:focus {
  border-color: #e9322d;
  -webkit-box-shadow: 0 0 3px #f8b9b7;
  box-shadow: 0 0 3px #f8b9b7;
}
.core-form .form-actions {
  padding: 0.3999999999999999em 20px 1.4em;
  margin-top: 1.4em;
  margin-bottom: 1.4em;
  background-color: #f6f8f9;
  border-top: 1px solid #e5e9ec;
  zoom: 1;
}
.core-form .form-actions:before,
.core-form .form-actions:after {
  display: table;
  content: "";
  zoom: 1;
  *display: inline;
}
.core-form .form-actions:after {
  clear: both;
}
.core-form .uneditable-input {
  display: block;
  background-color: #ffffff;
  border-color: #eee;
  -webkit-box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.025);
  box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.025);
  cursor: not-allowed;
}
.core-form :-moz-placeholder {
  color: #bfbfbf;
}
.core-form ::-webkit-input-placeholder {
  color: #bfbfbf;
}
.core-form .help-block,
.core-form .help-inline {
  color: #808080;
}
.core-form .help-block {
  display: block;
  margin-bottom: 0.7em;
}
.core-form .help-inline {
  display: inline-block;
  *display: inline;
  /* IE7 inline-block hack */

  *zoom: 1;
  vertical-align: middle;
  padding-left: 5px;
}
.core-form .input-prepend,
.core-form .input-append {
  margin-bottom: 5px;
}
.core-form .input-prepend input,
.core-form .input-append input,
.core-form .input-prepend select,
.core-form .input-append select,
.core-form .input-prepend .uneditable-input,
.core-form .input-append .uneditable-input {
  *margin-left: 0;
  border-radius: 0 3px 3px 0;
}
.core-form .input-prepend .uneditable-input,
.core-form .input-append .uneditable-input {
  border-left-color: #ccc;
}
.core-form .input-prepend .add-on,
.core-form .input-append .add-on {
  display: inline-block;
  width: auto;
  min-width: 16px;
  height: 1.4em;
  padding: 4px 5px;
  font-weight: normal;
  line-height: 1.4em;
  text-align: center;
  vertical-align: middle;
  background-color: #e6e6e6;
  border: 1px solid #ccc;
}
.core-form .input-prepend .add-on,
.core-form .input-append .add-on,
.core-form .input-prepend .btn,
.core-form .input-append .btn {
  border-radius: 3px 0 0 3px;
}
.core-form .input-prepend .btn,
.core-form .input-append .btn {
  padding-bottom: 4px;
  padding-top: 4px;
}
.core-form .input-prepend .active,
.core-form .input-append .active {
  background-color: #d1eb5c;
  border-color: #829b13;
}
.core-form .input-prepend .add-on,
.core-form .input-prepend .btn {
  margin-right: -1px;
}
.core-form .input-append input,
.core-form .input-append select .uneditable-input {
  border-radius: 3px 0 0 3px;
}
.core-form .input-append .uneditable-input {
  border-left-color: #eee;
  border-right-color: #ccc;
}
.core-form .input-append .add-on,
.core-form .input-append .btn {
  margin-left: -1px;
  border-radius: 0 3px 3px 0;
}
.core-form .input-prepend.input-append input,
.core-form .input-prepend.input-append select,
.core-form .input-prepend.input-append .uneditable-input {
  border-radius: 0;
}
.core-form .input-prepend.input-append .add-on:first-child,
.core-form .input-prepend.input-append .btn:first-child {
  margin-right: -1px;
  border-radius: 3px 0 0 3px;
}
.core-form .input-prepend.input-append .add-on:last-child,
.core-form .input-prepend.input-append .btn:last-child {
  margin-left: -1px;
  border-radius: 0 3px 3px 0;
}
.core-form .search-query {
  padding-left: 14px;
  padding-right: 14px;
  margin-bottom: 0;
  border-radius: 14px;
}
.core-form .control-group {
  margin-bottom: 0.7em;
}
.core-form legend + .control-group {
  margin-top: 1.4em;
  -webkit-margin-top-collapse: separate;
}
.form-search input,
.form-inline input,
.form-horizontal input,
.form-search textarea,
.form-inline textarea,
.form-horizontal textarea,
.form-search select,
.form-inline select,
.form-horizontal select,
.form-search .help-inline,
.form-inline .help-inline,
.form-horizontal .help-inline,
.form-search .uneditable-input,
.form-inline .uneditable-input,
.form-horizontal .uneditable-input,
.form-search .input-prepend,
.form-inline .input-prepend,
.form-horizontal .input-prepend,
.form-search .input-append,
.form-inline .input-append,
.form-horizontal .input-append {
  display: inline-block;
  margin-bottom: 0;
}
.form-search .hide,
.form-inline .hide,
.form-horizontal .hide {
  display: none;
}
.form-search label,
.form-inline label {
  display: inline-block;
}
.form-search .input-append,
.form-inline .input-append,
.form-search .input-prepend,
.form-inline .input-prepend {
  margin-bottom: 0;
}
.form-search .radio,
.form-search .checkbox,
.form-inline .radio,
.form-inline .checkbox {
  padding-left: 0;
  margin-bottom: 0;
  vertical-align: middle;
}
.form-search .radio input[type="radio"],
.form-search .checkbox input[type="checkbox"],
.form-inline .radio input[type="radio"],
.form-inline .checkbox input[type="checkbox"] {
  float: left;
  margin-left: 0;
  margin-right: 3px;
}
.form-horizontal .control-group {
  margin-bottom: 1.4em;
  zoom: 1;
}
.form-horizontal .control-group:before,
.form-horizontal .control-group:after {
  display: table;
  content: "";
  zoom: 1;
  *display: inline;
}
.form-horizontal .control-group:after {
  clear: both;
}
.form-horizontal .control-label {
  float: left;
  width: 140px;
  padding-top: 5px;
  text-align: left;
}
.form-horizontal .controls {
  margin-left: 160px;
  /* Super jank IE7 fix to ensure the inputs in .input-append and input-prepend don't inherit the margin of the parent, in this case .controls */

  *display: inline-block;
  *margin-left: 0;
  *padding-left: 20px;
}
.form-horizontal .help-block {
  margin-top: 0.7em;
  margin-bottom: 0;
}
.form-horizontal .form-actions {
  padding-left: 160px;
}
/*
 * Tables.less
 * Tables for, you guessed it, tabular data
 * ---------------------------------------- */
table.table {
  width: 100%;
  margin-bottom: 1.4em;
  padding: 0;
  border-collapse: separate;
  *border-collapse: collapse;
  /* IE7, collapse table to remove spacing */

  font-size: 12px;
  border: 1px solid #ddd;
  border-radius: 4px;
}
table.table th,
table.table td {
  padding: 10px 10px 9px;
  line-height: 1.4em;
  text-align: left;
}
table.table th {
  padding-top: 9px;
  font-weight: bold;
  vertical-align: middle;
}
table.table thead th {
  border-bottom: 1px solid #ddd;
}
table.table td {
  vertical-align: top;
}
table.table th + th,
table.table th + td,
table.table td + td {
  border-left: 1px solid #ddd;
}
table.table tr + tr th,
table.table tr + tr td {
  border-top: 1px solid #ddd;
}
table.table tbody tr:first-child td:first-child {
  border-top-left-radius: 4px;
}
table.table tbody tr:first-child td:last-child {
  border-top-right-radius: 4px;
}
table.table tbody tr:last-child td:first-child {
  border-bottom-left-radius: 4px;
}
table.table tbody tr:last-child td:last-child {
  border-bottom-right-radius: 4px;
}
table.zebra tbody tr:nth-child(odd) td {
  background-color: #f9f9f9;
}
table.zebra tbody tr:hover td {
  background-color: #f5f5f5;
}
table.table .header {
  cursor: pointer;
}
table.table .header:after {
  content: "";
  float: right;
  margin-top: 7px;
  border-width: 0 4px 4px;
  border-style: solid;
  border-color: #000 transparent;
  visibility: hidden;
}
table.table .headerSortUp,
table.table .headerSortDown {
  background-color: rgba(141, 192, 219, 0.25);
  text-shadow: 0 1px 1px rgba(255, 255, 255, 0.75);
}
table.table .header:hover:after {
  visibility: visible;
}
table.table .headerSortDown:after,
table.table .headerSortDown:hover:after {
  visibility: visible;
  filter: alpha(opacity=60);
  opacity: 0.6;
}
table.table .headerSortUp:after {
  border-bottom: none;
  border-left: 4px solid transparent;
  border-right: 4px solid transparent;
  border-top: 4px solid #000;
  visibility: visible;
  filter: alpha(opacity=60);
  opacity: 0.6;
}
/* Patterns.less
 * Common interface patterns
 * ---------------------------------------------------------------------------- */
.menu-container h1 {
  padding-bottom: 0;
}
.page-header {
  margin-bottom: 2.0999999999999996em;
  padding-bottom: 5px;
  border-bottom: 1px solid #e6e6e6;
  zoom: 1;
}
.page-header:before,
.page-header:after {
  display: table;
  content: "";
  zoom: 1;
  *display: inline;
}
.page-header:after {
  clear: both;
}
.page-header h1 {
  margin: 2px 0 0 0;
  line-height: 1.2em;
  float: left;
}
.page-header .actions {
  float: right;
}
.page-header .actions .btn {
  margin-left: 5px;
}
h1 .sub {
  color: #555555;
  display: block;
  font-weight: normal;
  font-size: 15px;
}
/* --- Rich container Pattern --- 
@Modele : It's a block who contains media and a text. The img is float to the left by defaults
@Options :  -- Add .imgRight to the container to put the img on the right
            -- Add .imgWrap to the container to put the text above the image
@exemple : <div class="rc">
                <a href="#" class="img"><img src="http://static3.viadeo-static.com/v_img/navigation/logoviaducblanc.png" /></a>
                <div class="bd">
                    example content text
                </div>
           </div>
*/
.rc,
.richcontainer {
  display: block;
  zoom: 1;
}
.rc:before,
.richcontainer:before,
.rc:after,
.richcontainer:after {
  display: table;
  content: "";
  zoom: 1;
  *display: inline;
}
.rc:after,
.richcontainer:after {
  clear: both;
}
.rc .bd,
.richcontainer .bd {
  display: table-cell;
  *display: inline-block;
  zoom: 1;
}
.rc .bd:after,
.richcontainer .bd:after {
  clear: both;
  display: block;
  visibility: hidden;
  overflow: hidden;
  height: 0 !important;
  line-height: 0;
  font-size: xx-large;
  content: " x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x ";
}
.rc .bd > :first-child,
.richcontainer .bd > :first-child {
  margin-top: 0;
}
.rc .bd > :last-child,
.richcontainer .bd > :last-child {
  margin-bottom: 0;
}
.rc .img,
.richcontainer .img,
.rc .img-left,
.richcontainer .img-left {
  float: left;
}
.rc .img-right,
.richcontainer .img-right,
.rc .imgRight,
.richcontainer .imgRight {
  float: right;
}
.rcsxs .img,
.rcsxs .img-left {
  margin-right: 5px;
}
.rcss .img,
.small .img,
.rcss .img-left,
.small .img-left {
  margin-right: 10px;
}
.rcsm .img,
.medium .img,
.rcsm .img-left,
.medium .img-left {
  margin-right: 15px;
}
.rcsl .img,
.large .img,
.rcsl .img-left,
.large .img-left {
  margin-right: 20px;
}
.rcsxl .img,
.xlarge .img,
.rcsxl .img-left,
.xlarge .img-left {
  margin-right: 30px;
}
.rcsxs .img-right,
.rcsxs .imgRight {
  margin-left: 5px;
}
.rcss .img-right,
.small .img-right,
.rcss .imgRight,
.small .imgRight {
  margin-left: 10px;
}
.rcsm .img-right,
.medium .img-right,
.rcsm .imgRight,
.medium .imgRight {
  margin-left: 15px;
}
.rcsl .img-right,
.large .img-right,
.rcsl .imgRight,
.large .imgRight {
  margin-left: 20px;
}
.rcsxl .img-right,
.xlarge .img-right,
.rcsxl .imgRight,
.xlarge .imgRight {
  margin-left: 30px;
}
.ui-label {
  display: inline-block;
  margin: 0 1px 5px 0;
  padding: 1px 14px;
  font-size: 11px;
  background: #f6f8f9;
  border: 1px solid #d0dce2;
  border-radius: 12px;
}
.ui-label .vicon {
  margin-right: -9px;
  color: #d0dce2;
  font-size: 8px;
}
.ui-label:hover {
  background: #e5e9ec;
}
.ui-label:hover .vicon {
  color: #80a0b2;
}
.ui-label:hover .vicon:hover {
  color: #c80000;
}
.ui-badge {
  background-color: #f56600;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #ff7919, #f56600);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #ff7919), color-stop(100%, #f56600));
  background-image: -webkit-linear-gradient(top, #ff7919, #f56600);
  background-image: -o-linear-gradient(top, #ff7919, #f56600);
  background-image: linear-gradient(to bottom, #ff7919, #f56600);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff7919', endColorstr='#f56600', GradientType=0);
  *filter: none;
  background-color: #FF7919;
  border: 1px solid #F56600;
  color: #FFFFFF;
  display: inline-block;
  font-weight: bold;
  padding: 1px 3px;
  border-radius: 3px;
}
.ui-badge.ui-badge-alt {
  background-color: #0065ae;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #0083e1, #0065ae);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #0083e1), color-stop(100%, #0065ae));
  background-image: -webkit-linear-gradient(top, #0083e1, #0065ae);
  background-image: -o-linear-gradient(top, #0083e1, #0065ae);
  background-image: linear-gradient(to bottom, #0083e1, #0065ae);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#0083e1', endColorstr='#0065ae', GradientType=0);
  *filter: none;
  border-color: #0065ae;
}
.ui-tag {
  display: inline-block;
  margin: 0 5px 5px 0;
  padding: 5px 10px;
  border: 1px solid #e0e8ec;
  border-radius: 3px;
  background: #f0f4f6;
  white-space: nowrap;
}
.ui-tag .remove {
  position: relative;
  display: inline-block;
  margin: 0 -5px 0 5px;
  padding: 0 0 0 5px;
  border-left: 1px solid #ffffff;
}
.ui-tag .remove:before {
  content: '';
  position: absolute;
  left: -2px;
  top: 0;
  width: 0;
  height: 100%;
  border-left: 1px solid #d9d9d9;
}
.ui-tag .remove .vicon {
  width: 15px;
  height: 15px;
  background: #999999;
  border-radius: 7px;
  font-size: 6px;
  color: white;
  vertical-align: top;
  line-height: 15px;
}
.ui-tag .remove:hover .vicon {
  background: #808080;
}
/* Avatar Styles */
.avatar {
  background: #ffffff;
  display: block;
  border: 1px solid #d9d9d9;
  padding: 2px;
}
.avatar img {
  display: block;
  background-color: #d9e0e6;
  -webkit-transition: background-color 0.2s;
  -moz-transition: background-color 0.2s;
  -o-transition: background-color 0.2s;
  transition: background-color 0.2s;
}
.avatar:hover {
  border-color: #bfbfbf;
}
.avatar:hover img {
  background-color: #cad3dc;
}
a:hover .avatar {
  border-color: #bfbfbf;
}
a:hover .avatar img {
  background-color: #cad3dc;
}
/* Global Icons */
.global-icon,
.ico {
  background: url('/v_img/global/global-sprite2.png') no-repeat;
  color: transparent;
  font: 0/0 a;
  display: inline-block;
  height: 16px;
  overflow: hidden;
  vertical-align: text-top;
  width: 16px;
}
/* Same image, but in PNG8 for IE6 */
.msie6 .global-icon,
.msie6 .ico {
  background-image: url('/v_img/global/global-sprite2-8.png');
}
/* Icon Fonts */
@font-face {
  font-family: 'Viadeoicons';
  src: url('/css/core/fonts/viadeoicons/viadeoicons.eot');
  src: url('/css/core/fonts/viadeoicons/viadeoicons.eot?#iefix') format('embedded-opentype'), url('/css/core/fonts/viadeoicons/viadeoicons.woff') format('woff'), url('/css/core/fonts/viadeoicons/viadeoicons.ttf') format('truetype');
  font-weight: normal;
  font-style: normal;
}
i.vicon {
  display: inline-block;
  margin: 0 3px 0 0;
  font-family: 'Viadeoicons';
  font-size: 10px;
  font-style: normal;
  font-weight: normal;
  text-decoration: none;
}
.popover-display {
  position: relative;
  *z-index: 10;
}
.popover-display:hover .popover {
  visibility: visible;
  margin-bottom: 7px;
  opacity: 1;
}
.popover {
  position: absolute;
  visibility: hidden;
  left: 0;
  bottom: 100%;
  z-index: 1000;
  width: 230px;
  margin: 0 0 -7px 0;
  border-radius: 5px;
  box-shadow: 1px 1px 12px rgba(0, 0, 0, 0.3);
  background: #ffffff;
  border: 2px solid #bcc8d1;
  opacity: 0;
  color: #000000;
  font-size: 12px;
  font-weight: normal;
  font-style: normal;
  text-decoration: none;
  text-shadow: none;
  text-align: left;
  white-space: normal;
  word-wrap: break-word;
  text-transform: none;
  pointer-events: none;
  -moz-transition: opacity .3s, margin .3s;
  -o-transition: opacity .3s, margin .3s;
  -webkit-transition: opacity .3s, margin .3s;
  transition: opacity .3s, margin .3s;
}
.popover:before {
  content: '';
  position: absolute;
  left: 10px;
  bottom: -10px;
  width: 0;
  height: 0;
  border-color: #bac8cf transparent transparent;
  border-style: solid;
  border-width: 10px 11px 0;
}
.popover:after {
  content: '';
  position: absolute;
  left: 14px;
  bottom: -7px;
  width: 0;
  height: 0;
  border-color: #f6f8f9 transparent transparent;
  border-style: solid;
  border-width: 7px 7px 0;
}
.popover .popover-header {
  display: block;
  padding: 10px 10px 5px;
  border-bottom: 1px dotted #d0dce2;
}
.popover .popover-content {
  display: block;
  padding: 10px;
}
.popover .popover-footer {
  display: block;
  padding: 10px;
  background: #f6f8f9;
  border-top: 1px solid #e5e9ec;
  border-bottom-left-radius: 3px;
  border-bottom-right-radius: 3px;
}
/* On bottom */
.popover-display.popover-bottom:hover .popover {
  margin-top: 7px;
}
.popover-bottom .popover {
  top: 100%;
  bottom: auto;
  margin: -7px 0 0 0;
}
.popover-bottom .popover:before {
  top: -10px;
  border-color: transparent transparent #bac8cf;
  border-style: solid;
  border-width: 0 11px 10px;
}
.popover-bottom .popover:after {
  top: -7px;
  border-color: transparent transparent #ffffff;
  border-style: solid;
  border-width: 0 7px 7px;
}
/* On left */
.popover-left .popover {
  right: 0;
  left: auto;
}
.popover-left .popover:before {
  right: 10px;
  left: auto;
}
.popover-left .popover:after {
  right: 14px;
  left: auto;
}
/* Popover sizes */
.popover-s {
  width: 230px;
}
.popover-m {
  width: 300px;
}
.popover-l {
  width: 400px;
}
.popover-xl {
  width: 530px;
}
.tooltip {
  position: relative;
}
.tooltip:hover .tooltip-content {
  visibility: visible;
  margin-bottom: 7px;
  opacity: 1;
  *margin-bottom: 2px;
}
.tooltip-content {
  position: absolute;
  visibility: hidden;
  left: 0;
  bottom: 100%;
  z-index: 998;
  min-width: 44px;
  margin: 0 0 -7px 0;
  padding: 2px 5px;
  border-radius: 3px;
  box-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
  background-color: #1a1a1a;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #404040, #1a1a1a);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #404040), color-stop(100%, #1a1a1a));
  background-image: -webkit-linear-gradient(top, #404040, #1a1a1a);
  background-image: -o-linear-gradient(top, #404040, #1a1a1a);
  background-image: linear-gradient(to bottom, #404040, #1a1a1a);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#404040', endColorstr='#1a1a1a', GradientType=0);
  *filter: none;
  opacity: 0;
  color: #ffffff !important;
  font: 11px/1.6em 'Lucida Grande', Tahoma, Arial, Verdana, sans-serif;
  text-align: center;
  text-decoration: none;
  text-shadow: none;
  white-space: nowrap;
  pointer-events: none;
  -moz-transition: opacity .3s, margin .3s;
  -o-transition: opacity .3s, margin .3s;
  -webkit-transition: opacity .3s, margin .3s;
  transition: opacity .3s, margin .3s;
}
.tooltip-content:after {
  content: '';
  position: absolute;
  left: 10px;
  bottom: -6px;
  width: 0;
  height: 0;
  border-color: #1a1a1a transparent transparent;
  border-style: solid;
  border-width: 7px 7px 0;
}
/* On right */
.tooltip.tooltip-right:hover .tooltip-content {
  margin-left: 7px;
  *margin-left: 5px;
}
.tooltip-right .tooltip-content {
  top: 3px;
  bottom: auto;
  left: 100%;
  margin: -7px 0 0 -7px;
}
.tooltip-right .tooltip-content:after {
  border-color: transparent #2b2b2b transparent transparent;
  border-width: 5px 5px 5px 0;
  left: -5px;
  bottom: auto;
  top: 6px;
}
/* On left */
.tooltip.tooltip-left:hover .tooltip-content {
  margin-right: 7px;
  *margin-right: 5px;
}
.tooltip-left .tooltip-content {
  top: 3px;
  bottom: auto;
  right: 100%;
  left: auto;
  margin: -7px -7px 0 0;
}
.tooltip-left .tooltip-content:after {
  border-color: transparent transparent transparent #2b2b2b;
  border-width: 5px 0 5px 5px;
  right: -5px;
  left: auto;
  bottom: auto;
  top: 6px;
}
/* On bottom */
.tooltip.tooltip-bottom:hover .tooltip-content {
  margin-top: 7px;
  *margin-top: 2px;
}
.tooltip-bottom .tooltip-content {
  top: 100%;
  bottom: auto;
  margin: -7px 0 0 0;
}
.tooltip-bottom .tooltip-content:after {
  border-color: transparent transparent #404040;
  border-width: 0 7px 7px;
  top: -7px;
  bottom: auto;
}
.btn {
  /* General Properties */

  /* Rules */

  display: inline-block;
  vertical-align: middle;
  zoom: 1;
  padding: 3px 10px;
  border-radius: 3px;
  position: relative;
  text-decoration: none;
  text-shadow: none;
  cursor: pointer;
  white-space: nowrap;
  text-align: center;
  /* Support for old layout */

}
.btn:hover {
  text-decoration: none;
  -webkit-box-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);
  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);
}
.btn:active,
.btn.active {
  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.2);
  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.2);
}
.btn span input,
.btn span button {
  display: inline;
  border: none;
  line-height: 1.4em;
  background: none;
  text-align: center;
  padding: 0;
  margin: 0;
  cursor: pointer;
  font-family: inherit;
  font-size: inherit !important;
}
.btn span img {
  vertical-align: text-top;
}
.btn .vicon.btn-icon-before {
  margin: 0 -2px 0 -7px;
  font-size: 8px;
}
.btn .vicon.btn-icon-after {
  margin: 0 -7px 0 -2px;
  font-size: 8px;
}
.btn-primary,
.btn-secondary,
.socialAction,
.eventsAction {
  color: #2e2e2e;
  border: 1px solid #ffbb02;
  background-color: #ffc906;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #ffd724, #ffc906);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #ffd724), color-stop(100%, #ffc906));
  background-image: -webkit-linear-gradient(top, #ffd724, #ffc906);
  background-image: -o-linear-gradient(top, #ffd724, #ffc906);
  background-image: linear-gradient(to bottom, #ffd724, #ffc906);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffd724', endColorstr='#ffc906', GradientType=0);
  *filter: none;
  _background-color: #ffd724 !important;
}
.btn-primary span,
.btn-secondary span,
.socialAction span,
.eventsAction span,
.btn-primary input,
.btn-secondary input,
.socialAction input,
.eventsAction input,
.btn-primary button,
.btn-secondary button,
.socialAction button,
.eventsAction button {
  color: #2e2e2e;
}
.btn-primary:hover,
.btn-secondary:hover,
.socialAction:hover,
.eventsAction:hover {
  background-color: #ffbb02;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #ffc906, #ffbb02);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #ffc906), color-stop(100%, #ffbb02));
  background-image: -webkit-linear-gradient(top, #ffc906, #ffbb02);
  background-image: -o-linear-gradient(top, #ffc906, #ffbb02);
  background-image: linear-gradient(to bottom, #ffc906, #ffbb02);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffc906', endColorstr='#ffbb02', GradientType=0);
  *filter: none;
  color: #2e2e2e;
}
.btn-primary:active,
.btn-secondary:active,
.socialAction:active,
.eventsAction:active {
  background-color: #ffbb02;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #ffc906, #ffbb02);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #ffc906), color-stop(100%, #ffbb02));
  background-image: -webkit-linear-gradient(top, #ffc906, #ffbb02);
  background-image: -o-linear-gradient(top, #ffc906, #ffbb02);
  background-image: linear-gradient(to bottom, #ffc906, #ffbb02);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffc906', endColorstr='#ffbb02', GradientType=0);
  *filter: none;
}
.btn-primary.btn-disabled,
.btn-secondary.btn-disabled,
.socialAction.btn-disabled,
.eventsAction.btn-disabled,
.btn-primary.btn-loading,
.btn-secondary.btn-loading,
.socialAction.btn-loading,
.eventsAction.btn-loading {
  background-color: #ffe057;
  border-color: #ffd04f;
  color: #f2b100;
}
.btn-primary.btn-disabled:link,
.btn-secondary.btn-disabled:link,
.socialAction.btn-disabled:link,
.eventsAction.btn-disabled:link,
.btn-primary.btn-loading:link,
.btn-secondary.btn-loading:link,
.socialAction.btn-loading:link,
.eventsAction.btn-loading:link,
.btn-primary.btn-disabled:visited,
.btn-secondary.btn-disabled:visited,
.socialAction.btn-disabled:visited,
.eventsAction.btn-disabled:visited,
.btn-primary.btn-loading:visited,
.btn-secondary.btn-loading:visited,
.socialAction.btn-loading:visited,
.eventsAction.btn-loading:visited,
.btn-primary.btn-disabled:hover,
.btn-secondary.btn-disabled:hover,
.socialAction.btn-disabled:hover,
.eventsAction.btn-disabled:hover,
.btn-primary.btn-loading:hover,
.btn-secondary.btn-loading:hover,
.socialAction.btn-loading:hover,
.eventsAction.btn-loading:hover,
.btn-primary.btn-disabled:active,
.btn-secondary.btn-disabled:active,
.socialAction.btn-disabled:active,
.eventsAction.btn-disabled:active,
.btn-primary.btn-loading:active,
.btn-secondary.btn-loading:active,
.socialAction.btn-loading:active,
.eventsAction.btn-loading:active,
.btn-primary.btn-disabled span,
.btn-secondary.btn-disabled span,
.socialAction.btn-disabled span,
.eventsAction.btn-disabled span,
.btn-primary.btn-loading span,
.btn-secondary.btn-loading span,
.socialAction.btn-loading span,
.eventsAction.btn-loading span {
  background-color: #ffe057;
  border-color: #ffd04f;
  color: #f2b100;
}
.btn-primary.btn-disabled .vicon,
.btn-secondary.btn-disabled .vicon,
.socialAction.btn-disabled .vicon,
.eventsAction.btn-disabled .vicon,
.btn-primary.btn-loading .vicon,
.btn-secondary.btn-loading .vicon,
.socialAction.btn-loading .vicon,
.eventsAction.btn-loading .vicon {
  color: #f2b100;
}
.btn-primary.btn-loading span,
.btn-secondary.btn-loading span,
.socialAction.btn-loading span,
.eventsAction.btn-loading span,
.btn-primary.btn-loading:hover span,
.btn-secondary.btn-loading:hover span,
.socialAction.btn-loading:hover span,
.eventsAction.btn-loading:hover span,
.btn-primary.btn-loading:active span,
.btn-secondary.btn-loading:active span,
.socialAction.btn-loading:active span,
.eventsAction.btn-loading:active span {
  background: transparent url('/v_img/coreui/buttons/loaders/secondary.gif') no-repeat 50% 0.3em;
  *background-position-y: 0;
}
.btn-primary.btn-inactive,
.btn-secondary.btn-inactive,
.socialAction.btn-inactive,
.eventsAction.btn-inactive,
.btn-primary.btn-inactive:hover,
.btn-secondary.btn-inactive:hover,
.socialAction.btn-inactive:hover,
.eventsAction.btn-inactive:hover {
  border-color: #ffbb02;
  background-color: #ffc906;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #ffd724, #ffc906);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #ffd724), color-stop(100%, #ffc906));
  background-image: -webkit-linear-gradient(top, #ffd724, #ffc906);
  background-image: -o-linear-gradient(top, #ffd724, #ffc906);
  background-image: linear-gradient(to bottom, #ffd724, #ffc906);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffd724', endColorstr='#ffc906', GradientType=0);
  *filter: none;
  -webkit-box-shadow: none;
  box-shadow: none;
  cursor: default;
}
.btn-default,
.secEventsAction {
  border: 1px solid #d5d5d5;
  background-color: #ebebeb;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #fafafa, #ebebeb);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #fafafa), color-stop(100%, #ebebeb));
  background-image: -webkit-linear-gradient(top, #fafafa, #ebebeb);
  background-image: -o-linear-gradient(top, #fafafa, #ebebeb);
  background-image: linear-gradient(to bottom, #fafafa, #ebebeb);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fafafa', endColorstr='#ebebeb', GradientType=0);
  *filter: none;
  color: #2e2e2e;
  _background-color: #fafafa !important;
}
.btn-default span,
.secEventsAction span,
.btn-default input,
.secEventsAction input,
.btn-default button,
.secEventsAction button {
  color: #2e2e2e;
}
.btn-default .vicon,
.secEventsAction .vicon {
  color: #808080;
}
.btn-default:hover,
.secEventsAction:hover {
  background-color: #d5d5d5;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #e8e8e8, #d5d5d5);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #e8e8e8), color-stop(100%, #d5d5d5));
  background-image: -webkit-linear-gradient(top, #e8e8e8, #d5d5d5);
  background-image: -o-linear-gradient(top, #e8e8e8, #d5d5d5);
  background-image: linear-gradient(to bottom, #e8e8e8, #d5d5d5);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#e8e8e8', endColorstr='#d5d5d5', GradientType=0);
  *filter: none;
  color: #2e2e2e;
}
.btn-default:hover .vicon,
.secEventsAction:hover .vicon {
  color: #2e2e2e;
}
.btn-default:active,
.secEventsAction:active {
  background-color: #d5d5d5;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #e8e8e8, #d5d5d5);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #e8e8e8), color-stop(100%, #d5d5d5));
  background-image: -webkit-linear-gradient(top, #e8e8e8, #d5d5d5);
  background-image: -o-linear-gradient(top, #e8e8e8, #d5d5d5);
  background-image: linear-gradient(to bottom, #e8e8e8, #d5d5d5);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#e8e8e8', endColorstr='#d5d5d5', GradientType=0);
  *filter: none;
}
.btn-default.btn-disabled,
.secEventsAction.btn-disabled,
.btn-default.btn-loading,
.secEventsAction.btn-loading {
  background-color: #ebebeb;
  border-color: #d5d5d5;
  color: #c8c8c8;
}
.btn-default.btn-disabled:link,
.secEventsAction.btn-disabled:link,
.btn-default.btn-loading:link,
.secEventsAction.btn-loading:link,
.btn-default.btn-disabled:visited,
.secEventsAction.btn-disabled:visited,
.btn-default.btn-loading:visited,
.secEventsAction.btn-loading:visited,
.btn-default.btn-disabled:hover,
.secEventsAction.btn-disabled:hover,
.btn-default.btn-loading:hover,
.secEventsAction.btn-loading:hover,
.btn-default.btn-disabled:active,
.secEventsAction.btn-disabled:active,
.btn-default.btn-loading:active,
.secEventsAction.btn-loading:active,
.btn-default.btn-disabled span,
.secEventsAction.btn-disabled span,
.btn-default.btn-loading span,
.secEventsAction.btn-loading span {
  background-color: #ebebeb;
  border-color: #d5d5d5;
  color: #c8c8c8;
}
.btn-default.btn-disabled .vicon,
.secEventsAction.btn-disabled .vicon,
.btn-default.btn-loading .vicon,
.secEventsAction.btn-loading .vicon {
  color: #c8c8c8;
}
.btn-default.btn-inactive,
.secEventsAction.btn-inactive,
.btn-default.btn-inactive:hover,
.secEventsAction.btn-inactive:hover {
  border-color: #d5d5d5;
  background-color: #ebebeb;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #fafafa, #ebebeb);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #fafafa), color-stop(100%, #ebebeb));
  background-image: -webkit-linear-gradient(top, #fafafa, #ebebeb);
  background-image: -o-linear-gradient(top, #fafafa, #ebebeb);
  background-image: linear-gradient(to bottom, #fafafa, #ebebeb);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fafafa', endColorstr='#ebebeb', GradientType=0);
  *filter: none;
  -webkit-box-shadow: none;
  box-shadow: none;
  cursor: default;
}
.btn-tertiary {
  color: #ffffff;
  border: 1px solid #86b300;
  background-color: #86b300;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #91cf00, #86b300);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #91cf00), color-stop(100%, #86b300));
  background-image: -webkit-linear-gradient(top, #91cf00, #86b300);
  background-image: -o-linear-gradient(top, #91cf00, #86b300);
  background-image: linear-gradient(to bottom, #91cf00, #86b300);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#91cf00', endColorstr='#86b300', GradientType=0);
  *filter: none;
  _background-color: #91cf00 !important;
}
.btn-tertiary span,
.btn-tertiary input,
.btn-tertiary button {
  color: #ffffff;
}
.btn-tertiary .vicon {
  color: #ffffff;
}
.btn-tertiary:hover {
  background-color: #62a600;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #91cf00, #62a600);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #91cf00), color-stop(100%, #62a600));
  background-image: -webkit-linear-gradient(top, #91cf00, #62a600);
  background-image: -o-linear-gradient(top, #91cf00, #62a600);
  background-image: linear-gradient(to bottom, #91cf00, #62a600);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#91cf00', endColorstr='#62a600', GradientType=0);
  *filter: none;
  border-color: #62a600;
  color: #ffffff;
}
.btn-tertiary:active {
  background-color: #62a600;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #91cf00, #62a600);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #91cf00), color-stop(100%, #62a600));
  background-image: -webkit-linear-gradient(top, #91cf00, #62a600);
  background-image: -o-linear-gradient(top, #91cf00, #62a600);
  background-image: linear-gradient(to bottom, #91cf00, #62a600);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#91cf00', endColorstr='#62a600', GradientType=0);
  *filter: none;
}
.btn-tertiary.btn-disabled,
.btn-tertiary.btn-loading {
  background-color: #91c200;
  border-color: #86b300;
  color: #739a00;
}
.btn-tertiary.btn-disabled:link,
.btn-tertiary.btn-loading:link,
.btn-tertiary.btn-disabled:visited,
.btn-tertiary.btn-loading:visited,
.btn-tertiary.btn-disabled:hover,
.btn-tertiary.btn-loading:hover,
.btn-tertiary.btn-disabled:active,
.btn-tertiary.btn-loading:active,
.btn-tertiary.btn-disabled span,
.btn-tertiary.btn-loading span {
  background-color: #91c200;
  border-color: #86b300;
  color: #739a00;
}
.btn-tertiary.btn-disabled .vicon,
.btn-tertiary.btn-loading .vicon {
  color: #739a00;
}
.btn-tertiary.btn-loading span,
.btn-tertiary.btn-loading:hover span,
.btn-tertiary.btn-loading:active span {
  background: transparent url('/v_img/coreui/buttons/buttons/loaders/primary.gif') no-repeat 50% 0.3em;
  *background-position-y: 0;
}
.btn-tertiary.btn-inactive,
.btn-tertiary.btn-inactive:hover {
  border-color: #86b300;
  background-color: #86b300;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #91cf00, #86b300);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #91cf00), color-stop(100%, #86b300));
  background-image: -webkit-linear-gradient(top, #91cf00, #86b300);
  background-image: -o-linear-gradient(top, #91cf00, #86b300);
  background-image: linear-gradient(to bottom, #91cf00, #86b300);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#91cf00', endColorstr='#86b300', GradientType=0);
  *filter: none;
  -webkit-box-shadow: none;
  box-shadow: none;
  cursor: default;
}
.btn-small {
  padding: 1px 10px;
  border-radius: 3px;
  font-size: 11px;
}
.btn-small .global-icon {
  margin: -1px 0;
}
.btn-large {
  padding: 7px 15px;
  border-radius: 3px;
  font-size: 13px;
}
.btn-disabled,
.btn-disabled:hover,
.btn-disabled:active,
.btn-loading,
.btn-loading:hover,
.btn-loading:active {
  cursor: not-allowed;
  -webkit-box-shadow: none;
  box-shadow: none;
  background-image: none;
}
.btn-loading span,
.btn-loading:hover span,
.btn-loading:active span {
  display: inline-block;
  overflow: hidden;
  height: 0;
  padding: 1em 0 0 0;
  background: transparent url('/v_img/coreui/buttons/loaders/default.gif') no-repeat 50% 0.3em;
  *background-position-y: 0;
}
.btn-append {
  border-radius: 0 3px 3px 0;
  margin-left: -3px;
  padding-left: 0;
  padding-right: 4px;
}
/**********************/
/* General Properties */
/**********************/
/* dropdown comp */
.dd {
  position: relative;
  display: inline-block;
  *display: inline;
  /* IE7 inline-block hack */

  *zoom: 1;
  text-shadow: none;
  /* dropdown button */

  /* dropdown menu */

  /* dropdown state */

  /* dropdown position */

  /* dropdown sub menu */

}
.dd .dd-btn .vicon {
  margin: 0 -6px 0 -2px;
  line-height: 12px;
  *line-height: 20px;
  *margin-top: -3px;
}
.dd .dd-btn .arrow {
  background-position: -159px -48px;
  left: 3px;
  margin: 0 6px 0 -3px;
  position: relative;
}
.dd .dd-btn.btn-append .arrow {
  border: 0;
  box-shadow: none;
  left: auto;
  margin: 0;
  vertical-align: bottom;
}
.dd .btn .arrow {
  margin: 0 -2px 0 0;
}
.dd .btn-tertiary .arrow {
  background-position: -159px -64px;
}
.dd .btn-small .arrow {
  background-position: -159px -49px;
  height: 14px;
}
.dd .dd-menu {
  background: #ffffff;
  border: 1px solid #cdd9e2;
  border-radius: 3px;
  -webkit-box-shadow: 0 3px 4px 0 rgba(0, 0, 0, 0.2);
  box-shadow: 0 3px 4px 0 rgba(0, 0, 0, 0.2);
  outline: medium none;
  padding: 0 5px;
  left: 0;
  top: 100%;
  position: absolute;
  width: auto;
  min-width: 100% !important;
  z-index: 10;
  display: none;
  /* dropdown menu item */

}
.dd .dd-menu .dd-item {
  border-top: 1px dotted #cad7e0;
  padding: 0;
  list-style: none;
  /* dropdown menu link */

}
.dd .dd-menu .dd-item:first-child {
  border: 0;
}
.dd .dd-menu .dd-item a,
.dd .dd-menu .dd-item .label {
  white-space: nowrap;
  padding: 3px 8px;
  margin: 2px -4px;
  color: #404040;
}
.dd .dd-menu .dd-item a {
  display: block;
  text-decoration: none;
}
.dd .dd-menu .dd-item a.dd-btn {
  padding-right: 24px;
}
.dd .dd-menu .dd-item.active a,
.dd .dd-menu .dd-item a:hover {
  background-color: #e1eaf0;
}
.dd .dd-menu .dd-item .label {
  display: inline-block;
  font-weight: bold;
}
.dd.open .dd-menu {
  display: block;
}
.dd.pull-right .dd-menu {
  left: auto;
  right: 0;
}
.dd .dd .dd-btn .arrow {
  background-position: -16px -256px;
  position: absolute;
  right: 5px;
  left: auto;
}
.dd .dd .dd-menu {
  overflow: visible;
  min-width: auto;
  position: absolute;
  top: -1px;
  left: 100%;
  background: #ffffff;
  display: none;
}
.dd .dd.open .dd-menu {
  display: block;
}
.dd .dd.open .dd-btn .arrow {
  background-position: -16px -240px;
}
.msie .dd .dd-menu {
  border: 1px dotted #cad7e0;
}
.msie7 .dd .dd-menu .dd-item {
  overflow: visible;
}
.msie6 .open,
.msie7 .dd.open {
  z-index: 10;
}
.core-form .input-append .dd .active.btn-default {
  border-color: #d5d5d5;
}
.popin-overlay {
  position: fixed;
  z-index: 4000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  opacity: 0.6;
  filter: alpha(opacity = 60);
  background: #000000;
  background: -webkit-radial-gradient(50% 20%, ellipse farthest-corner, rgba(0, 0, 0, 0.6), #000000);
  background: -moz-radial-gradient(50% 20%, ellipse farthest-corner, rgba(0, 0, 0, 0.6), #000000);
  background: -o-radial-gradient(50% 20%, ellipse farthest-corner, rgba(0, 0, 0, 0.6), #000000);
  background: radial-gradient(50% 20%, ellipse farthest-corner, rgba(0, 0, 0, 0.6), #000000);
  -webkit-animation: popin-overlay-fadein 0.5s;
  -moz-animation: popin-overlay-fadein 0.5s;
}
.popin-container {
  position: fixed;
  z-index: 4001;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow-y: auto;
}
.popin-container .popin-loader {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background: url('/v_img/profilev2/ajax-loader.gif') no-repeat 50% 35%;
}
.popin-container > .gr {
  width: 980px;
  margin: 0 auto;
}
.popin-container .popin {
  margin: 125px auto 0;
  padding: 5px !important;
  border-radius: 5px;
  background: #243843;
  background: rgba(27, 42, 50, 0.6);
  box-shadow: 0 0 4px rgba(0, 0, 0, 0.7);
  -webkit-animation: popin-fadein 0.15s;
  -moz-animation: popin-fadein 0.15s;
}
.popin-container .popin .popin-header {
  zoom: 1;
  padding: 15px 20px 5px;
  border-bottom: 1px solid #e5e9ec;
  background: #f6f8f9;
}
.popin-container .popin .popin-header:before,
.popin-container .popin .popin-header:after {
  display: table;
  content: "";
  zoom: 1;
  *display: inline;
}
.popin-container .popin .popin-header:after {
  clear: both;
}
.popin-container .popin .popin-header h5 {
  margin: 0;
  padding: 0;
  text-transform: uppercase;
}
.popin-container .popin .popin-header button.close {
  float: right;
  color: #0a87cd;
}
.popin-container .popin .popin-header button.close:hover {
  color: #0a87cd;
  text-decoration: underline;
}
.popin-container .popin .popin-body {
  padding: 15px 20px;
  background: #ffffff;
}
.popin-container .popin .popin-footer {
  zoom: 1;
  padding: 15px 20px;
  border-top: 1px solid #e5e9ec;
  background: #f6f8f9;
}
.popin-container .popin .popin-footer:before,
.popin-container .popin .popin-footer:after {
  display: table;
  content: "";
  zoom: 1;
  *display: inline;
}
.popin-container .popin .popin-footer:after {
  clear: both;
}
.popin-container .popin.popin-close-animation {
  -webkit-animation: popin-fadeout 0.3s;
  -moz-animation: popin-fadeout 0.3s;
}
@-webkit-keyframes popin-overlay-fadein {
  from {
    opacity: 0;
  }
  to {
    opacity: 0.6;
  }
}
@-moz-keyframes popin-overlay-fadein {
  from {
    opacity: 0;
  }
  to {
    opacity: 0.6;
  }
}
@-webkit-keyframes popin-fadein {
  from {
    opacity: 0;
    -webkit-transform: scale(0.1);
    -moz-transform: scale(0.1);
  }
  to {
    opacity: 1;
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
  }
}
@-moz-keyframes popin-fadein {
  from {
    opacity: 0;
    -webkit-transform: scale(0.1);
    -moz-transform: scale(0.1);
  }
  to {
    opacity: 1;
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
  }
}
@-webkit-keyframes popin-fadeout {
  from {
    opacity: 1;
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
  }
  to {
    opacity: 0;
    -webkit-transform: translateY(-30px);
    -moz-transform: translateY(-30px);
  }
}
@-moz-keyframes popin-fadeout {
  from {
    opacity: 1;
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
  }
  to {
    opacity: 0;
    -webkit-transform: translateY(-30px);
    -moz-transform: translateY(-30px);
  }
}
.nav {
  margin: 0;
  margin-bottom: 1.4em;
  list-style: none;
  text-shadow: none;
}
.nav li a {
  display: block;
  _display: inline-block;
}
.nav li a:hover {
  text-decoration: none;
}
.nav-tabs,
.nav-pills {
  zoom: 1;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -o-user-select: none;
  user-select: none;
}
.nav-tabs:before,
.nav-pills:before,
.nav-tabs:after,
.nav-pills:after {
  display: table;
  content: "";
  zoom: 1;
  *display: inline;
}
.nav-tabs:after,
.nav-pills:after {
  clear: both;
}
.nav-tabs li,
.nav-pills li {
  float: left;
  padding: 0;
  position: relative;
}
.nav-tabs li a,
.nav-pills li a {
  -webkit-transition: background-color 0.15s ease-out;
  -moz-transition: background-color 0.15s ease-out;
  -o-transition: background-color 0.15s ease-out;
  transition: background-color 0.15s ease-out;
}
.nav-tabs li a:hover,
.nav-pills li a:hover {
  text-decoration: none;
}
.nav-tabs li.side-links,
.nav-pills li.side-links {
  float: right;
}
.nav-tabs li.side-links a,
.nav-pills li.side-links a {
  padding: 8px 4px;
  color: #808080;
  background: none;
  border: none;
  box-shadow: none;
  -webkit-transition: none;
  -moz-transition: none;
  -o-transition: none;
  transition: none;
}
.nav-tabs li.side-links a:focus,
.nav-pills li.side-links a:focus,
.nav-tabs li.side-links a:hover,
.nav-pills li.side-links a:hover,
.nav-tabs li.side-links a:active,
.nav-pills li.side-links a:active {
  color: #0a87cd;
  text-decoration: underline;
  background: none;
}
.nav-tabs {
  background-color: #f6f8f9;
  border: 1px solid #d0dce2;
  border-width: 1px 0 1px 0;
  padding: 0 10px;
  height: 34px;
}
.nav-tabs a {
  font-size: 13px;
  height: 16px;
  line-height: 16px;
  padding: 9px 25px;
  outline: none;
}
.nav-tabs a:hover {
  background-color: #e1eaf0;
}
.nav-tabs a:focus {
  background-color: #e1eaf0;
}
.nav-tabs .active a {
  color: #000000;
  background-color: #ffffff;
  height: 17px;
  padding: 11px 24px 9px 24px;
  margin-top: -3px;
  _margin-top: -2px;
  border: 1px solid #d0dce2;
  border-bottom: none;
}
.nav-tabs.nav-tabs-secondary {
  background: #f6f8f9;
  border-color: #d0dce2;
  margin-bottom: 0;
  padding: 0;
}
.nav-tabs.nav-tabs-secondary a {
  border: solid #e0e8ec;
  border-width: 0 1px 0 0;
}
.nav-tabs.nav-tabs-secondary li:first-child a {
  border-width: 0 1px;
}
.nav-tabs.nav-tabs-secondary .active a {
  background: #ffffff;
  border: solid #d0dce2;
  border-width: 0 1px 0 0;
  margin: 0;
  padding: 9px 25px 8px;
  position: relative;
}
.nav-tabs.nav-tabs-secondary .active a:after,
.nav-tabs.nav-tabs-secondary .active a:before {
  border: solid transparent;
  content: '';
  height: 0;
  margin: -1px;
  pointer-events: none;
  position: absolute;
  width: 0;
}
.nav-tabs.nav-tabs-secondary .active a:after {
  border-bottom-color: #ffffff;
  border-width: 8px;
  left: 50%;
  margin-left: -8px;
  bottom: 0;
}
.nav-tabs.nav-tabs-secondary .active a:before {
  border-bottom-color: #d0dce2;
  border-width: 9px;
  left: 50%;
  margin-left: -9px;
  bottom: 0;
}
.nav-tabs-section .section {
  display: block;
}
.nav-tabs-section .loader {
  display: none;
}
.nav-tabs-section.loading .section {
  display: none;
}
.nav-tabs-section.loading .loader {
  display: block;
}
.msie6 .nav-tabs-secondary .active a,
.msie9 .nav-tabs-secondary .active a {
  padding-bottom: 8px;
}
.nav-pills {
  border: 1px solid #d0dce2;
  border-width: 1px 0;
  background: #f6f8f9;
  margin: 0;
  padding: 6px 10px 2px;
}
.nav-pills li a {
  background: #f6f8f9;
  border: 1px solid #f6f8f9;
  border-radius: 3px;
  line-height: 1.4em;
  margin-right: 10px;
  padding: 5px 10px;
}
.nav-pills li a:hover {
  background: #e0e8ec;
  border-color: #e0e8ec;
}
.nav-pills li.active a {
  color: #000000;
  border: 1px solid #d0dce2;
  background: #ffffff;
  cursor: default;
}
.nav-pills li.side-links a {
  margin: 0;
  background: none;
  border: none;
  -webkit-transition: none;
  -moz-transition: none;
  -o-transition: none;
  transition: none;
}
.nav-pills li.side-links a:hover {
  color: #0a87cd;
}
.btncontainer .btn-yn {
  float: left;
  text-transform: uppercase;
  font-weight: bold;
  font-size: 11px;
}
.btncontainer .btn-yn .lnk-yes,
.btncontainer .btn-yn .lnk-no {
  float: left;
  padding: 0 10px;
  line-height: 22px;
  text-decoration: none;
  color: #bfbfbf;
  border: 1px solid #d9d9d9;
  background-color: #d9d9d9;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #ffffff, #d9d9d9);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #ffffff), color-stop(100%, #d9d9d9));
  background-image: -webkit-linear-gradient(top, #ffffff, #d9d9d9);
  background-image: -o-linear-gradient(top, #ffffff, #d9d9d9);
  background-image: linear-gradient(to bottom, #ffffff, #d9d9d9);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffff', endColorstr='#d9d9d9', GradientType=0);
  *filter: none;
  *background-color: #e6e6e6;
  cursor: pointer;
}
.btncontainer .btn-yn .lnk-yes input[type='radio'],
.btncontainer .btn-yn .lnk-no input[type='radio'] {
  visibility: hidden;
  margin-right: -15px;
}
.btncontainer .btn-yn .lnk-yes {
  border-radius: 3px 0 0 3px;
}
.btncontainer .btn-yn .lnk-no {
  border-radius: 0 3px 3px 0;
}
.btncontainer .btn-yes .lnk-yes {
  color: #ffffff;
  border-color: #829b13 #95b216 #b0d21a #a8c819;
  background-color: #c4e52f;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #829b13, #c4e52f);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #829b13), color-stop(100%, #c4e52f));
  background-image: -webkit-linear-gradient(top, #829b13, #c4e52f);
  background-image: -o-linear-gradient(top, #829b13, #c4e52f);
  background-image: linear-gradient(to bottom, #829b13, #c4e52f);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#829b13', endColorstr='#c4e52f', GradientType=0);
  *filter: none;
  *background-color: #95b216;
  cursor: default;
}
.btncontainer .btn-no .lnk-no {
  color: #ffffff;
  border-color: #b65312;
  border-bottom-color: #dc6316;
  background-color: #ea762b;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #ce5d14, #ea762b);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #ce5d14), color-stop(100%, #ea762b));
  background-image: -webkit-linear-gradient(top, #ce5d14, #ea762b);
  background-image: -o-linear-gradient(top, #ce5d14, #ea762b);
  background-image: linear-gradient(to bottom, #ce5d14, #ea762b);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ce5d14', endColorstr='#ea762b', GradientType=0);
  *filter: none;
  cursor: default;
}
.btncontainer .btn-yes .lnk-no:hover,
.btncontainer .btn-no .lnk-yes:hover,
.btncontainer .btn-yes .lnk-no:focus,
.btncontainer .btn-no .lnk-yes:focus {
  color: #404040;
  border-color: #bfbfbf;
  background-color: #d9d9d9;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #f2f2f2, #d9d9d9);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #f2f2f2), color-stop(100%, #d9d9d9));
  background-image: -webkit-linear-gradient(top, #f2f2f2, #d9d9d9);
  background-image: -o-linear-gradient(top, #f2f2f2, #d9d9d9);
  background-image: linear-gradient(to bottom, #f2f2f2, #d9d9d9);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#f2f2f2', endColorstr='#d9d9d9', GradientType=0);
  *filter: none;
  outline: none;
}
.btncontainer .lbl {
  overflow: auto;
}
.btncontainer .lbl .lbl-no {
  color: #808080;
}
.autocomplete {
  position: relative;
}
.autocomplete .autocomplete-menu {
  position: absolute;
  z-index: 1000;
  visibility: hidden;
  opacity: 0;
  margin-top: -10px;
  border: 1px solid #bac8cf;
  background: #ffffff;
  border-bottom-left-radius: 5px;
  border-bottom-right-radius: 5px;
  box-shadow: 1px 2px 6px rgba(0, 0, 0, 0.2);
  -moz-transition: margin-top 0.3s, opacity 0.3s;
  -o-transition: margin-top 0.3s, opacity 0.3s;
  -webkit-transition: margin-top 0.3s, opacity 0.3s;
  transition: margin-top 0.3s, opacity 0.3s;
}
.autocomplete .autocomplete-menu li {
  padding: 10px;
  border-top: 1px dotted #d0dce2;
  cursor: pointer;
}
.autocomplete .autocomplete-menu li:first-child {
  border-top: 0;
}
.autocomplete .autocomplete-menu li:hover,
.autocomplete .autocomplete-menu li.active {
  background: #f6f8f9;
}
.autocomplete .autocomplete-menu li:last-child {
  border-bottom-left-radius: 5px;
  border-bottom-right-radius: 5px;
}
.autocomplete.active .autocomplete-menu {
  opacity: 1;
  visibility: visible;
  margin-top: -1px;
}
.paginator li {
  display: inline-block;
  margin: 0 0.1em;
  padding: 0;
  *display: inline;
  *zoom: 1;
}
.paginator li a {
  display: inline-block;
  min-width: 26px;
  padding: 5px 0;
  text-align: center;
  color: #404040;
  text-decoration: none;
  font-weight: bold;
  font-size: 11px;
  border: 1px solid #e0e8ec;
  border-radius: 3px;
  background: #ffffff;
}
.paginator li.arrow a {
  background-color: #ebebeb;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #fafafa, #ebebeb);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #fafafa), color-stop(100%, #ebebeb));
  background-image: -webkit-linear-gradient(top, #fafafa, #ebebeb);
  background-image: -o-linear-gradient(top, #fafafa, #ebebeb);
  background-image: linear-gradient(to bottom, #fafafa, #ebebeb);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fafafa', endColorstr='#ebebeb', GradientType=0);
  *filter: none;
}
.paginator li.arrow .vicon {
  margin-right: 0;
  font-size: 7px;
  color: #808080;
}
.paginator li.arrow:hover a {
  border-color: #d5d5d5;
  background-color: #d5d5d5;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #e8e8e8, #d5d5d5);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #e8e8e8), color-stop(100%, #d5d5d5));
  background-image: -webkit-linear-gradient(top, #e8e8e8, #d5d5d5);
  background-image: -o-linear-gradient(top, #e8e8e8, #d5d5d5);
  background-image: linear-gradient(to bottom, #e8e8e8, #d5d5d5);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#e8e8e8', endColorstr='#d5d5d5', GradientType=0);
  *filter: none;
}
.paginator li.arrow:hover .vicon {
  color: #000000;
}
.paginator li.arrow.disabled a {
  border-color: #e0e8ec;
  background-color: #ebebeb;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #fafafa, #ebebeb);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #fafafa), color-stop(100%, #ebebeb));
  background-image: -webkit-linear-gradient(top, #fafafa, #ebebeb);
  background-image: -o-linear-gradient(top, #fafafa, #ebebeb);
  background-image: linear-gradient(to bottom, #fafafa, #ebebeb);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fafafa', endColorstr='#ebebeb', GradientType=0);
  *filter: none;
  cursor: default;
}
.paginator li.arrow.disabled .vicon {
  color: #bfbfbf;
}
.paginator li.ellipsis span {
  margin: 0 5px;
  color: #bfbfbf;
}
.paginator li.active a,
.paginator li:hover a {
  border-color: #d0dce2;
  background-color: #e0e8ec;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #f0f4f6, #e0e8ec);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #f0f4f6), color-stop(100%, #e0e8ec));
  background-image: -webkit-linear-gradient(top, #f0f4f6, #e0e8ec);
  background-image: -o-linear-gradient(top, #f0f4f6, #e0e8ec);
  background-image: linear-gradient(to bottom, #f0f4f6, #e0e8ec);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#f0f4f6', endColorstr='#e0e8ec', GradientType=0);
  *filter: none;
}
.paginator li.active .vicon,
.paginator li:hover .vicon {
  color: #000000;
}
.paginator li.active a {
  cursor: default;
}
.paginator li:hover a {
  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);
}
.paginator-multi li {
  padding: 0;
  margin: 0 2px;
}
.paginator-multi li a {
  outline: none;
}
.paginator-multi .multi {
  position: relative;
}
.paginator-multi .multi.open .multi-list {
  opacity: 1;
  visibility: visible;
  top: 50%;
}
.paginator-multi .multi .multi-list {
  position: absolute;
  z-index: 100;
  left: 0;
  top: 100%;
  width: 100%;
  max-height: 185px;
  overflow-x: hidden;
  visibility: hidden;
  opacity: 0;
  border: 1px solid #d0dce2;
  -webkit-transition: opacity 0.5s;
  -moz-transition: opacity 0.5s;
  -o-transition: opacity 0.5s;
  transition: opacity 0.5s;
  background: #ffffff;
  box-shadow: inset 0 7px 21px -17px rgba(0, 0, 0, 0.7), inset 0 -7px 21px -17px rgba(0, 0, 0, 0.6);
}
.paginator-multi .multi .paginator-btn {
  padding-left: 10px;
  padding-right: 5px;
  background-color: #ebebeb;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #fafafa, #ebebeb);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #fafafa), color-stop(100%, #ebebeb));
  background-image: -webkit-linear-gradient(top, #fafafa, #ebebeb);
  background-image: -o-linear-gradient(top, #fafafa, #ebebeb);
  background-image: linear-gradient(to bottom, #fafafa, #ebebeb);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fafafa', endColorstr='#ebebeb', GradientType=0);
  *filter: none;
}
.paginator-multi .multi .paginator-btn .vicon {
  margin-right: 0;
  margin-left: -2px;
  font-size: 7px;
  color: #808080;
}
.paginator-multi .multi ul {
  width: 150%;
  max-height: 183px;
  overflow-y: scroll;
  border-radius: 3px;
}
.paginator-multi .multi ul li {
  margin: 0;
  padding: 0;
  display: block;
}
.paginator-multi .multi ul li a {
  display: block;
  text-align: center;
  border: 0 none;
  padding: 5px 10% 5px 0;
  background: none;
  border-radius: 0;
  box-shadow: none;
  outline: none;
  filter: none;
}
.paginator-multi .multi ul li.active a,
.paginator-multi .multi ul li:hover a {
  background-color: #e0e8ec;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #f0f4f6, #e0e8ec);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #f0f4f6), color-stop(100%, #e0e8ec));
  background-image: -webkit-linear-gradient(top, #f0f4f6, #e0e8ec);
  background-image: -o-linear-gradient(top, #f0f4f6, #e0e8ec);
  background-image: linear-gradient(to bottom, #f0f4f6, #e0e8ec);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#f0f4f6', endColorstr='#e0e8ec', GradientType=0);
  *filter: none;
}
.paginator-multi .multi ul li.active a {
  border: 1px solid #d0dce2;
  border-width: 1px 0;
}
.custom-radio:not(#unsupported) {
  cursor: pointer;
}
.custom-radio:not(#unsupported) input {
  opacity: 0;
  width: 20px;
}
.custom-radio:not(#unsupported) .custom-radio-element {
  display: inline-block;
  width: 8px;
  height: 8px;
  margin: 0 5px 2px -20px;
  border: 3px solid #ffffff;
  border-radius: 50%;
  background-color: #ffffff;
  vertical-align: middle;
  box-shadow: 0 0 0 1px #cbd2d6;
}
.custom-radio:not(#unsupported):hover .custom-radio-element {
  box-shadow: 0 0 0 1px #88a7bc;
}
.custom-radio:not(#unsupported) input:checked + .custom-radio-element {
  background-color: #344957;
}
.btn-toggle {
  display: inline-block;
  padding: 4px 10px 4px 0;
  border: 1px solid #d6d6d6;
  border-radius: 3px;
  color: #808080;
  line-height: 18px;
  background-color: #e6e6e6;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #f2f2f2, #e6e6e6);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #f2f2f2), color-stop(100%, #e6e6e6));
  background-image: -webkit-linear-gradient(top, #f2f2f2, #e6e6e6);
  background-image: -o-linear-gradient(top, #f2f2f2, #e6e6e6);
  background-image: linear-gradient(to bottom, #f2f2f2, #e6e6e6);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#f2f2f2', endColorstr='#e6e6e6', GradientType=0);
  *filter: none;
  box-shadow: 0 1px 0 rgba(0, 0, 0, 0.16);
  cursor: pointer;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  -o-user-select: none;
  user-select: none;
}
.btn-toggle input {
  visibility: hidden;
  width: 1px;
}
.btn-toggle .btn-toggle-check {
  display: inline-block;
  width: 18px;
  height: 18px;
  margin: 0 5px 0 0;
  border-radius: 2px;
  background: #fcfcfc;
  box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.25);
}
.btn-toggle .btn-toggle-check .vicon {
  visibility: hidden;
  font-size: 8px;
}
.btn-toggle-checked {
  border-color: #bac8cf;
  color: #0977b5;
  background-color: #d0dce2;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #e5e9ec, #d0dce2);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #e5e9ec), color-stop(100%, #d0dce2));
  background-image: -webkit-linear-gradient(top, #e5e9ec, #d0dce2);
  background-image: -o-linear-gradient(top, #e5e9ec, #d0dce2);
  background-image: linear-gradient(to bottom, #e5e9ec, #d0dce2);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#e5e9ec', endColorstr='#d0dce2', GradientType=0);
  *filter: none;
  box-shadow: inset 0 1px 0 rgba(186, 200, 207, 0.8);
}
.btn-toggle-checked .btn-toggle-check {
  background: #f6f8f9;
  box-shadow: 1px 1px 1px rgba(6, 87, 132, 0.5);
}
.btn-toggle-checked .btn-toggle-check .vicon {
  visibility: visible;
  color: #0977b5;
}
.btn-toggle:hover {
  border-color: #bac8cf;
  background-color: #c8d6de;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #d6dde1, #c8d6de);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #d6dde1), color-stop(100%, #c8d6de));
  background-image: -webkit-linear-gradient(top, #d6dde1, #c8d6de);
  background-image: -o-linear-gradient(top, #d6dde1, #c8d6de);
  background-image: linear-gradient(to bottom, #d6dde1, #c8d6de);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#d6dde1', endColorstr='#c8d6de', GradientType=0);
  *filter: none;
}
.core-form label.btn-toggle {
  display: inline-block;
}
.core-form label.btn-toggle input {
  display: inline;
  width: 1px;
}
